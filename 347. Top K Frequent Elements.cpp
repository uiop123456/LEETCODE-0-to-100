class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int>mp;
        for(int i=0;i<nums.size();i++){
            mp[nums[i]]++;
        }
        vector<int>ans;
        //pair<freq,number>
        priority_queue<pair<int,int>>pq;
        for(auto it:mp){
            pq.push({it.second,it.first});
            if(pq.size() > mp.size()-k){
                ans.push_back(pq.top().second);
                pq.pop();
            }
        }
        return ans;
    }
};

// IDK who TF did it
int init = []{
    ofstream("user.out", ios::out) << "[2,1]\n[1]\n[-1]\n[1,2]\n[0]\n[2,1]\n[-1,2]\n[1,2,3]\n[1]\n[3,1]\n[5,3,1]\n[10,11,4,8,6,7,3,1,2,5]\n[3,5]\n[-1,4]\n[4,-1,3]\n[7,10,3]\n[1,-4,9,4,0,-3]\n[-8,0,8,-5,2,-1,4]\n[-55,-9,5,75,73,-68,-12]\n[-197,63,-366,437,441,42,52,-727,-299,78,71,72,89,-566,-295,916,-15,-257,263,-202,261,906,-528,-255,-947,-247,-241,-520,333,-221,360,-952,-318,775,-447,-77,788,-90,547,611,729,-765,616,625,700,699,756,734,946,769,-811,-619,-660,-177,-30,-434,813,-930,-72,-64,-54,-746,-18,3,-398,-854,-267,836,-830,939,-596,-562,161,-412,67,-277,875,336,115,-549,288,-236,-540,-419,275,-987,-844,294,-678,-676,-216,-677,11,440,-780,-166,490,949,528,569,554,-466,790,8,-802,-853,-81,-630,-392,-933,-667,955,850,-909,-182,-159,-363,50,368,844,-312,-165,-489,-666,6,406,615,-61,-809,109,168,-870,930,145,779,-98,327,14,512,903,-38,-74,647]\n[-492,178,13,357,658,738,7,148,472,580,-749,504,254,-9,253,-754,-507,340,-940,-29,-34,251,-56,-972,459,782,802,-534,605,-537,-538,-540,349,260,469,463,-93,792,610,-550,-775,-110,-556,374,815,832,-113,-560,122,618,809,360,-565,365,-566,-134,-148,-147,631,277,-165,-584,-585,-793,835,382,-175,283,489,635,-182,502,-599,145,120,-204,-606,-951,386,492,-222,-228,-230,-976,454,664,-237,-621,859,-245,998,-816,-258,-629,872,-262,-815,-633,70,508,96,-636,-640,507,513,879,-289,512,-977,-299,-650,523,158,-304,409,903,-960,-314,154,909,917,-659,-317,-318,408,679,-830,213,-333,530,-339,683,932,-347,-919,693,660,-367,717,950,160,537,-400,-402,-703,-706,953,-927,-418,226,955,-684,731,995,573,744,-721,725,967,-445,-449,-716,-715,-732,165,-934,-461,54,-475,572,-935,-476,47,434,41,-871,571,-872,26,324,-489,444,-494,-747,-969,-3,759,-5,-878,86,-21,-23,183,588,-31,776,182,104,-941,187,-526,255,-61,-64,-66,-768,993,-536,350,-539,785,-86,-85,-136,257,796,-986,-776,-945,853,-780,989,810,-125,-892,-973,-784,198,632,-146,831,820,106,372,829,-582,-162,630,-583,89,-586,-174,643,-590,-988,380,836,-200,842,-902,384,80,200,-805,494,-903,650,-615,648,-231,-618,861,-620,-241,297,751,-630,-259,-632,896,394,-271,-639,-641,-281,294,-288,895,-823,899,-305,-655,403,129,-325,-664,-665,-666,-335,684,-672,-675,-364,-841,542,704,424,-374,-690,307,-961,-384,545,547,-699,-405,961,-705,-928,-707,-422,-421,315,-860,-438,-443,558,-932,719,-447,94,-451,966,234,-457,975,318,-471,58,-474,730,-466,37,-483,436,185,857,88,-501,-938,765,-13,764,248,592,452,589,770,773,114,-764,780,-567,-57,602,-533,-767,355,-82,323,-91,-100,366,192,569,-558,-118,-124,476,-891,-127,-133,116,479,-786,-142,627,-149,817,-153,-579,-161,828,826,638,-796,634,840,-203,848,-605,-607,846,-221,-612,385,112,-240,393,934,-907,-628,869,-908,109,870,-817,-268,517,-955,-282,399,-911,150,133,85,-651,-303,-311,127,-829,-918,-669,-671,-345,-979,-354,-840,691,-922,997,-683,-688,439,92,-691,310,944,74,543,419,715,-701,716,162,-854,-413,546,-884,-710,-856,575,-428,-429,441,-431,726,-631,175,-966,984,973,316,63,-470,737,53,236,43,-485,60,17,205,752,344,10,-497,5,262,30,-555,-6,99,-939,97,766,-37,102,356,-882,-28,606,460,-69,-481,-143,791,-644,137,798,-551,-104,806,326,-150,-575,-145,822,275,-947,-164,-580,-792,376,-173,-176,834,636,484,-191,641,-600,-801,852,202,501,-502,-468,-610,-229,768,667,284,152,-954,-625,-250,-251,-265,-634,668,-277,-515,-822,884,-645,-516,155,298,405,-310,-312,-316,345,677,-831,916,929,-343,-837,689,302,-355,-681,535,-373,-845,-380,-692,-694,335,-700,951,-406,-409,-411,-855,421,-713,329,559,-720,482,78,169,317,327,32,-744,-486,338,-745,-874,2,293,321,-15,-509,-779,361,990,-40,151,-742,-278,461,44,-49,100,-63,-769,-78,801,-885,-83,787,34,28,511,805,-559,-890,359,-129,595,-157,-570,-577,278,827,-169,113,-177,378,-188,-467,-193,-197,-211,645,497,-876,-224,285,-503,306,-236,-989,876,-239,-766,662,674,-327,-328,593,52,-818,-637,-473,-978,119,522,912,-323,-999,701,-529,410,923,928,926,-838,527,164,238,249,-377,311,-388,-925,-852,-702,-708,-424,549,553,968,427,435,614,-996,-442,40,661,-864,-730,981,247,-462,-479,235,431,-480,35,-103,-735,18,-873,377,-403,250,115,777,874,-128,-564,-893,-131,103,-81,-135,816,280,762,-964,754,616,814,521,276,373,-578,-158,841,31,282,-43,838,839,-601,486,-603,75,706,-726,-752,-7,-233,-332,-814,665,55,-820,-668,242,-32,411,448,305,214,799,430,908,-952,186,779,301,-349,353,-995,-391,-682,988,651,-991,707,-904,134,-387,946,-395,-535,-982,712,957,-611,705,-810,-427,550,-541,336,-446,-244,722,-863,565,-546,-469,259,865,-549,36,-408,62,-970,471,125,-589,-120,51,204,597,824,396,209,12,-139,750,620,900,994,-574,223,-294,370,-520,825,-306,233,118,-50,913,-226,-60,-588,-331,-257,-725,-198,837,-679,728,-298,919,933,601,-524,783,529,-353,33,-365,241,358,-983,-738,756,313,-77,506,-508,897,767,-436,-190,965,556,739,-464,-276,-414,9,-84,761,940,269,-420,581,-967,786,-992,-394,-711,-596,478,-519,-351,904,-39,-875,694,568,646,-987,554,-594,642,-727,703,-865,339,-712,-530,414,-399,914,-819,388,-528,524,503,228,456,-266,991,931,-499,-350,-803,-685,-379,952,138,-417,-358,619,-858,87,-187,963,-731,483,341,978,878,-950,548,455,612,-126,803,139,-90,189,481,-79,680,-937,-212,586,181,-674,117,4,-254,797,-543,95,-522,415,-949,999,-842,740,413,475,170,379,-968,108,364,709,-33,778,781,920,-740,490,945,656,624,-686,453,644,-386,700,-635,607,-302,130,-948,207,239,-101,813,-997,71,962,-346,603,-292,-252,533,695,-959,-340,216,-717,-962,964,157,894,657,-771,784,-390,563,-435,-454,-274,-763,142,392,566,615,893,76,464,-14,300,763,-439,-72,-648,623,538,-96,-329,-412,-737,417,-802,-18,-774,73,132,351,652,287,-54,-195,193,845,84,-677,268,666,-773,-393,743,844,-719,16,578,-74,-11,166]\n";

    exit(0);
    return 0;
}();

class Solution{public:vector<int>topKFrequent(vector<int>&nums,int k){return{};}};
